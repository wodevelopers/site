<?php

class Cloud_UploadController extends Zend_Controller_Action {

    public function init() {
        if (!Zend_Auth::getInstance()->hasIdentity()) {
            $this->_helper->redirector->gotoRoute(array('module' => 'account', 'controller' => 'sign', 'action' => 'in', 'webapp' => '1006'));
        }
        
        if (Zend_Auth::getInstance()->getIdentity()->primeiro_login != 1) {
            $this->_helper->redirector->gotoRoute(array('module' => 'account', 'controller' => 'sign', 'action' => 'done'));
        }
        
        $cfg = new Zend_Session_Namespace('M1006');
        if (Zend_Auth::getInstance()->getIdentity()->cloud == 0 || $cfg->upload !== 1) {
            $this->_helper->redirector->gotoRoute(array('module'=> 'account', 'controller'=> 'select', 'action' =>'index'));
        }
    }

    public function indexAction() {
        echo    '<script>
                    if (window.screen.width < "600") {
                        window.location.href = "' . $this->view->baseUrl('cloud/responsive/upload') . '";
                    }
                </script>';
        $this->_helper->layout->setLayout('layout_modules');
        $this->view->title = ' - CLOUD / Upload de arquivos';

        $this->view->headLink()
                ->appendStylesheet($this->view->baseUrl('public/modules/default/css/uikit.css'))
                ->appendStylesheet($this->view->baseUrl('public/modules/default/css/components/form-file.css'));        

        $this->view->headScript()
                ->prependFile($this->view->baseUrl('public/modules/default/js/uikit.js'))
                ->appendFile($this->view->baseUrl('public/modules/default/js/components/tooltip.js'))
                ->appendFile($this->view->baseUrl('public/modules/default/js/components/grid.js'))
                ->appendFile($this->view->baseUrl('public/modules/default/js/components/accordion.js'))
                ->appendFile($this->view->baseUrl('public/modules/default/js/components/notify.js'))
                
//                ->appendFile('https://www.gstatic.com/charts/loader.js')
                
                ->appendFile($this->view->baseUrl('public/library/pdfmake/js/pdfmake.min.js'))
                ->appendFile($this->view->baseUrl('public/library/pdfmake/js/vfs_fonts.js'))
                
                ->appendFile($this->view->baseUrl('public/library/upload/js/jquery.knob.js'))
                ->appendFile($this->view->baseUrl('public/library/upload/js/jquery.ui.widget.js'))
                ->appendFile($this->view->baseUrl('public/library/upload/js/jquery.iframe-transport.js'))
                ->appendFile($this->view->baseUrl('public/library/upload/js/jquery.fileupload.js'))
                
                ->appendFile($this->view->baseUrl('public/modules/cloud/js/library.upload.js'))
                ->appendFile($this->view->baseUrl('public/modules/cloud/js/library.default.js'))
                ;
        
             
    }

    public function senderrorAction() {
        $this->_helper->layout->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
        $this->getResponse()->setHeader('Content-Type', 'application/json');
        
        Zend_Loader::loadClass("SendMail");
        $send = new SendMail(); 
        
        $setBodyHtml = 'Cliente: ' . Zend_Auth::getInstance()->getIdentity()->id_cliente . '<br /> Usuário: ' . Zend_Auth::getInstance()->getIdentity()->id . ' - ' . Zend_Auth::getInstance()->getIdentity()->nome . ' <br />Descrição do erro: ' . $this->_request->getParam('message');
        
        $result = $send->functionSend($setBodyHtml, 'Problema reportado (Módulo XML)', null, null, 'programacao@softcuca.com.br', 'Suporte SoftCuca', $this->attachmentMail($this->_request->getParam('xml'), 'text/xml', $this->_request->getParam('name')));

        echo Zend_Json::encode($result);
    }
    
    private function configMail() {
        $config = array(
            'auth' => 'login',
            'username' => 'softcuca@softcuca.com.br',
            'password' => 'soft@2015',
            'ssl' => 'tls',
            'port' => 587
        );
        
        return $config;
    }
    
    private function transportMail() {
        $transport = new Zend_Mail_Transport_Smtp('mail.softcuca.com.br', $this->configMail());
        Zend_Mail::setDefaultTransport($transport);
        return $transport;        
    }
    
    private function attachmentMail($body = null, $type = null, $name = null) {
        $attachment = new Zend_Mime_Part($body);
        $attachment->type = $type;
        $attachment->disposition = Zend_Mime::DISPOSITION_ATTACHMENT;
        $attachment->encoding = Zend_Mime::ENCODING_BASE64;
        $attachment->filename = $name;
        
        return $attachment;
    }

    public function is_utf8($string) {
        return (mb_detect_encoding($string, 'UTF-8', true) == 'UTF-8');
    }
    
    public function mb_detect_encoding($string, $enc = null, $ret = null) {

        static $enclist = array(
            'UTF-8', 'ASCII',
            'ISO-8859-1', 'ISO-8859-2', 'ISO-8859-3', 'ISO-8859-4', 'ISO-8859-5',
            'ISO-8859-6', 'ISO-8859-7', 'ISO-8859-8', 'ISO-8859-9', 'ISO-8859-10',
            'ISO-8859-13', 'ISO-8859-14', 'ISO-8859-15', 'ISO-8859-16',
            'Windows-1251', 'Windows-1252', 'Windows-1254',
        );

        $result = false;

        foreach ($enclist as $item) {
            $sample = iconv($item, $item, $string);
            if (md5($sample) == md5($string)) {
                if ($ret === NULL) {
                    $result = $item;
                } else {
                    $result = true;
                }
                break;
            }
        }

        return $result;
    }
    
    
    public function viewcheckAction() {
        $this->_helper->layout->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
        $this->getResponse()->setHeader('Content-Type', 'application/json');
        
        Zend_Loader::loadClass("File");
        $clsFiscalDocument = new File();
        $result = $clsFiscalDocument->view_check_value();

        $jsonArr[] = array(
            nfe_entrada => $result['recebidos'],
            nfe_saida => $result['emitidos'],
            nfse_entrada => $result['tomados'],
            nfse_saida => $result['prestados']
        );

        echo Zend_Json::encode($jsonArr);
    }
    
    public function insertAction() {
        $this->_helper->layout->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
        $this->getResponse()->setHeader('Content-Type', 'application/json');
        
        $file = $this->formatFile(file_get_contents($_FILES['file']['tmp_name']));

        $result = array(status => 'error', error => array(message => 'Erro: Desconhecido', button => true), file => $file);
        
        try {
            if ($_FILES['file']['type'] != 'text/xml') {
                $result = array(status => 'error', error => $this->errorApplication(00001), file => $file);
            } else {
                $result = $this->errorPermission($file);
            }
        } catch (Exception $exc) {   
            $result = array(status => 'error', error => $this->errorException($exc->getCode(), $exc->getMessage()), file => $file);
        }
            
        echo Zend_Json::encode($result);
    }
    
    public function errorPermission($file = null) {
        $result = array(message => 'Erro: Desconhecido', button => true);
        
        Zend_Loader::loadClass("File");
        $model = new File();
        
        Zend_Loader::loadClass("Available");
        $available = new Available();
        
        $date = $model->functionGetDate($file)[0]['function_get_date'];
        $count = $model->selectCountFileMonth(Zend_Auth::getInstance()->getIdentity()->id_cliente, date("m", strtotime($date)), date("Y", strtotime($date)))[0]['count'];
        $module = $available->availableAppCloud(Zend_Auth::getInstance()->getIdentity()->id_cliente, '\'' . $date . '\'')[0]['retorna_qtde_modulo'];
            
        switch (($count ? intval($count) : 0) >= ($module ? intval($module) : 0)) {
            case true:
                $result = array(status => 'error', error => array(message => 'Erro: ' . ($module ? ('Você já atingiu o seu limite de ' . $module . ' documentos no mês: ' . date("m", strtotime($date)) . '/' . date("Y", strtotime($date))) : ('Você não possui espaço contratado para o mês: ' . date("m", strtotime($date)) . '/' . date("Y", strtotime($date)) . ', <a style="text-decoration: underline;" href="#modal-historic" data-uk-modal>confira seu histórico</a>')) . '.</small>', button => false), file => $file);
                break;

            case false:
                $model->insertTable($file);
                $result = array(status => 'success', error => array(message => 'Arquivo enviado com sucesso', button => false), file => $file);
                break;
        }
        
        return $result;
    }
    
    public function errorApplication($code = null) {
        $result = array(message => 'Erro: Desconhecido', button => true);
        
        switch ($code) {
            case 00001:
                $result = array(message => 'Erro: O arquivo não foi enviado, pois só é possível armazenar arquivos com extensão <b>.xml</b>', button => false);
                break;
        }
        
        return $result;
    }
    
    public function errorException($code = null, $message = null) {
        $result = array(message => 'Erro: Desconhecido', button => true);
        
        switch ($code) {
            case 2200:
                $result = array(message => 'Erro: Estrutura do arquivo inválida', button => true);
                break;

            case 22004:
                $result = array(message => 'Erro: A estrutura do arquivo não possui todas as informações necessárias para completar está ação', button => true);
                break;

            case 23505:
                $result = array(message => 'Erro: O arquivo não foi enviado, pois já foi armazenado em sua nuvem', button => false);
                break;

            default:
                $result = $this->errorDB($message);
                break;
        }
        
        return $result;
    }
    
    public function errorDB($message = null) {
        $result = array(message => 'Erro: Desconhecido', button => true);
        
        switch (intval(substr($message, 44, 4))) {
            case 0003:
                $result = array(message => 'Erro: O arquivo não foi enviado, pois o <b>CNPJ/CPF</b> encontrado no <b>XML</b>, não representa nenhum <b>CNPJ/CPF</b> desta conta', button => false);  
                break;

            default:
                $result = array(message => 'Erro: Não foi possível encontrar o problema', button => true);
                break;
        }
        
        return $result;
    }
    
    private function formatFile($xml = null) {
        if ($this->mb_detect_encoding($xml) === 'UTF-8') {
            $xml = preg_replace("/<\\?xml.*\\?>/u", '', $xml, 1);
        } else {
            $xml = preg_replace("/<\\?xml.*\\?>/u", '', utf8_encode($xml), 1);
        }
        
        return strtr($xml, array("&" => "e", "'" => " ", '\\' => '\\\\\\\\'));
    }
    
    public function rajaxAction() {
        $this->_helper->layout->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
        $this->getResponse()->setHeader('Content-Type', 'application/json');
        $report = new Zend_Session_Namespace('report');
        echo Zend_Json::encode($report->result);
    }
    
    public function rAction() {
        $this->_helper->layout->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
        $report = new Zend_Session_Namespace('report');
        
        
        echo $report->error = $this->_request->getParam('data');
    }

    public function reportAction() {
        $this->_helper->layout->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
        $report = new Zend_Session_Namespace('report');

        $html = '<page backtop="156px" backleft="101px" backbottom="81px" backright="75px" align="justify">
                    <page_header style="text-align:center; margin-top: 50px;">
                        <img src="./public/modules/default/img/brand/logo_softcuca_cloud.png" width="155" heigth="49" />   
                        <h3 style="">Lista de arquivos com problemas</h3>     
                    </page_header>
                    <page_footer>
                        <table class="page_footer">
                            <tr>
                                <td style="width: 100%; padding: 40px;">
                                    [[page_cu]]/[[page_nb]]
                                </td>
                            </tr>
                        </table>
                    </page_footer>';
        $i = 0;
        foreach ($report->error as $value) {
            $html .= 'Arquivo: ' . $value['file'] . '<br /> <span style="color: #FF0000;">' . $value['message'] . '</span> <hr />';
            $i++;
        }
        
        $html .= '<p align="right">Total de arquivo(s): ' . $i . '</p>';

        $html .= '</page>';
        
        require_once 'html2pdf/html2pdf.class.php';

        try {
            $html2pdf = new HTML2PDF('P', 'A4', 'pt', true, 'UTF-8', 0);

            # Passamos o html que queremos converte.
            $html2pdf->writeHTML($html);
            $html2pdf->pdf->SetTitle('Relatório de importação');
            
            $html2pdf->Output('lista.pdf', 'I');
        } catch (HTML2PDF_exception $e) {
            throw new Zend_Controller_Action_Exception($e->getMessage(), 404);
        }
    }
    
    public function ajaxAction() {
        $this->_helper->layout->disableLayout();
        $this->_helper->viewRenderer->setNoRender();
        $this->getResponse()->setHeader('Content-Type', 'application/json');
        
        echo Zend_Json::encode(array(data => []));        
    }
    
}

